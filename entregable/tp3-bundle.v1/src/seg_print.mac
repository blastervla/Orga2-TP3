; ** por compatibilidad se omiten tildes **
; ==============================================================================
; TRABAJO PRACTICO 3 - System Programming - ORGANIZACION DE COMPUTADOR II - FCEN
; ==============================================================================

%ifndef __SEG_PRINT_MAC__
%define __SEG_PRINT_MAC__

;; print_text_pm:
;;  Description:
;;      Imprime un string en la seccion especificada de la memoria de Video.
;;
;;  Parametros:
;;      %1: Puntero al mensaje
;;      %2: Longitud del mensaje
;;      %3: Color
;;      %4: Fila
;;      %5: Columna
;;
;;  Color:
;;      * Bit #: 7 6 5 4 3 2 1 0
;;               | | | | | | | |
;;               | | | | | ^-^-^-- Fore color
;;               | | | | ^-------- Fore color bright bit
;;               | ^-^-^---------- Back color
;;               ^---------------- Back color bright bit OR enables blinking text
;;
;;  Nota:
;;      * Solo funciona en MODO PROTEGIDO.
;;      * TODOS los par√°metros son de 32 BITS.
;;
%macro seg_print_text_pm 5
    pushad

    push %3             ; %3 = color
    push %2             ; %2 = longitud del mensaje
    push %1             ; %1 = puntero al mensaje
    push %5             ; %5 = columna
    push %4             ; %4 = fila

    ; Calcular offset para imprimir en pantalla
    ; offset = fila * 80 + columna
    pop eax             ; eax = fila
    mov ebx, 80
    imul ebx            ; eax = fila * 80
    pop ebx             ; ebx = columna
    add eax, ebx        ; eax = fila * 80 + columna

    ; Establecer el puntero al buffer de pantalla en (fila, columna)
    mov ebx, 0x00000    ; !!!
    shl eax, 1          ; Cada posicion de la memoria de video ocupa un word
    add ebx, eax        ; ebx = puntero a la posicion (fila, columna)

    ; Cargar mensaje, longitud y color
    pop edi             ; edi = puntero al mensaje
    pop ecx             ; ecx = longitud del mensaje
    pop eax             ; eax = color

    ; Acomodar color en la parte alta de ax
    shl ax, 8           ; ah = color

    ; Imprimir cadena
    %%ciclo_cadena:
        mov     al, [edi]       ; al = caracter
        mov     [fs:ebx], ax     ; Escribir en pantalla
        add     ebx, 2          ; Avanzar el puntero de la memoria de video
        inc     edi             ; Avanzar el puntero de la cadena
        loop    %%ciclo_cadena

    popad
%endmacro
%endif  ;; !__SEG_PRINT_MAC__ ;;
